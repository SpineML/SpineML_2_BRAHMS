#!/bin/bash

##############################################################
# SpineML to BRAHMS platform specific wrapper ('NIX)         #
# Alex Cope 2012 /Updated 2013. Updates 2014: Seb James      #
#                                                            #
# convert_script_s2b is used to process a SpineML model into #
# Brahms-compatible executable components.                   #
#                                                            #
# It makes use of spineml_preflight to "preprocess" the      #
# model first, so you'll need to have installed              #
# SpineML_Preflight.                                         #
#                                                            #
##############################################################


function usage () {
   cat <<EOF

usage: $0 [options]

convert_script_s2b is used to process a model in \$SPINEML_2_BRAHMS_DIR/model/.

It creates executable components from the SpineML descriptions provided in
\$SPINEML_2_BRAHMS_DIR/model/ (or your model dir) using XSL transformations. It
outputs source code and executable code into a working directory, which
defaults to \$HOME/spineml-2-brahms

It can use pre-compiled components from /usr/lib/spineml-2-brahms and pre-
installed XSL files from /usr/share/spineml-2-brahms if it has been correctly
installed on a Unix or Linux system, or it can be executed in-place using the
source code as downloaded. In the case the working directory is the downloaded
directory, SpineML_2_BRAHMS.

Options are:

  -w dirpath   Set the working directory - SPINEML_2_BRAHMS_DIR. If left un-set
               this will default either to SpineML_2_BRAHMS in the current
               working directory, \$HOME/SpineML_2_BRAHMS (if it already exists)
               or to \$HOME/spineml-2-brahms.

  -s           DON'T rebuild sys.xml and sys-exe.xml (The BRAHMS SystemML 
               description of the SpineML model). This prevents the calls to
               xsltproc which create temp/sys(-exe).xml, as long as
               temp/sys(-exe).xml exists. Added to speed up development when
               the same experiment is being called repeatedly. If sys.xml
               doesn't exist, the xsltproc calls DO go ahead, despite the
               presence of this option.

  -r           DO rebuild the Brahms components, even if they already exist.

  -m modeldir  Set the model directory - the location of the experiment xml
               files. Defaults to: \$SPINEML_2_BRAHMS_DIR/model

               (\$SPINEML_2_BRAHMS_DIR can be set with the -w option.)

               This is copied into the output directory and "preflighted" by
               spineml_preflight before the simulation starts.

  -o outdir    Set the output directory for temporary files and data output.
               Defaults to \$SPINEML_2_BRAHMS_DIR/temp.

  -e expt      Choose the experiment to run. Each model may have several
               experiments, numbers 0, 1, 2, etc. Here, you can pass the number
               of the experiment to run. E.g. -e 0. Defaults to 0.

  -p "option"  Property change option. This modifies the experiment.xml file to
               add a change to a parameter or the initial value of a state
               variable. The population or projection name must be given, along
               with the parameter/variable property name and the new value.
               These three elements are separated with the colon character. The
               new value can have its dimensions given after the value.

               E.g.: -p "Striatum_D1:tau:45ms" - change param "tau" to 45 ms
               for the population "Striatum_D1".

               Multiple instances of this option may be given. The content of
               each option is passed unmodified to spineml_preflight.

  -n nodes     Use Sun Grid Engine: Provide the number of nodes on which to
               launch brahms instances. NB: Currently, only IPv4 TCP/IP is used
               to transfer data between nodes, not MPI/Infiniband.

  -a arch      Request specific architecture for each node (amd or intel). Only
               takes effect when using Sun Grid Engine mode (-n)

  -v           Make brahms output verbose debugging information (by passing the
               --d brahms option)

  -V           Make brahms output very verbose debugging information (by
               passing the --dd brahms option)

EOF
   exit 0
}

# A function to convert a relative path into an absolute path.
function abspath {
    # NB: Don't do any echos to stdout in here!
    if [[ -d "$1" ]]; then
        pushd "$1" >/dev/null
        pwd
        popd >/dev/null
    elif [[ -e $1 ]]; then
        pushd "$(dirname "$1")" >/dev/null
        echo "$(pwd)/$(basename "$1")"
        popd >/dev/null
    else
        echo "$1" does not exist! >&2
        return 127
    fi
}

# The default location for the spineml-2-brahms temporary files and input model(s)
SPINEML_2_BRAHMS_DIR=$HOME"/spineml-2-brahms"

# User may have SpineML_2_BRAHMS in the current working directory, or
# in the their home directory, in which case use that instead (this is
# for developers to use a localised version of SpineML_2_BRAHMS, and
# for Mac)
PWD=`pwd`
if [ $(basename $PWD) = "SpineML_2_BRAHMS" ]; then
    # Really in-place style
    SPINEML_2_BRAHMS_DIR=$PWD
    echo "in-place style; SPINEML_2_BRAHMS_DIR: $SPINEML_2_BRAHMS_DIR"

elif [ -d "$PWD/SpineML_2_BRAHMS" ]; then
    # Working with SpineML_2_BRAHMS in current working directory - "in-place" style.
    SPINEML_2_BRAHMS_DIR="$PWD/SpineML_2_BRAHMS"
    echo "Just outside in-place style; SPINEML_2_BRAHMS_DIR: $SPINEML_2_BRAHMS_DIR"

elif [ -d "$HOME/SpineML_2_BRAHMS" ]; then
    # Working with a $HOME/SpineML_2_BRAHMS installation - "in-home-dir" style.
    SPINEML_2_BRAHMS_DIR="$HOME/SpineML_2_BRAHMS"
    echo "in-home-dir style SPINEML_2_BRAHMS_DIR: $SPINEML_2_BRAHMS_DIR"
else
    echo "Working with SPINEML_2_BRAHMS_DIR as $SPINEML_2_BRAHMS_DIR"
fi

# Rebuild temp/sys(-exe).xml? Defaults to "true". Ideally, this would
# check a timestamp on the experiment/model.xml etc, and determine if
# the rebuild needs to go ahead.
REBUILD_SYSTEMML="true"

REBUILD_COMPONENTS="false"

# Input directory containing the model.
MODEL_DIR="_unknown_model"
# The output directory for temporary files and output logs.
OUTPUT_DIR="temp"

# Number of nodes
NODES=""
NODEARCH=""

VERBOSE_BRAHMS="no"

EXPT_NUM=""

# Declare an array for the property change options
declare -a PROPERTY_CHANGES
PCI=0 # Property Change Iterator

# Parse cmd line options
while getopts w:srm:o:e:p:n:a:vV\? opt
do
    case "$opt" in
        w)  SPINEML_2_BRAHMS_DIR="$OPTARG"
            ;;
        s)  REBUILD_SYSTEMML="false"
            ;;
        r)  REBUILD_COMPONENTS="true"
            ;;
        m)  MODEL_DIR="$OPTARG"
            ;;
        o)  OUTPUT_DIR="$OPTARG"
            ;;
        e)  EXPT_NUM="$OPTARG"
            ;;
        p)  PROPERTY_CHANGES[$PCI]=" --property_change=$OPTARG"
            PCI=$((PCI+1))
            ;;
        n)  NODES="$OPTARG"
            ;;
	a)  NODEARCH="$OPTARG"
	    ;;
        v)  VERBOSE_BRAHMS="--d"
            ;;
        V)  VERBOSE_BRAHMS="--dd"
            ;;
        \?) usage
            ;;
    esac
done
shift `expr $OPTIND - 1`

# Check NODES is a number:
if [[ "x$NODES" -ne "x" ]]; then # user provided -n option.
    re='^[0-9]+$'
    if ! [[ $NODES =~ $re ]] ; then
	echo "Please enter a positive integer for the number of processing nodes." >&2
	exit -1
    fi

    echo "Submitting execution on $NODES nodes."
    echo "Node architecture requested: $NODEARCH"
fi

# Do we have the ~/spineml-2-brahms directory in place? If not, create
# it.
if [ ! -d "$SPINEML_2_BRAHMS_DIR" ]; then
    mkdir -p "$SPINEML_2_BRAHMS_DIR"
    if [ "$?" -ne "0" ]; then
        echo "Failed to create directory $SPINEML_2_BRAHMS_DIR. Exiting." >&2
        exit -1
    fi
fi

# Check we have spineml_preflight
which spineml_preflight >/dev/null
spfrtn=$?
if [ "$spfrtn" -ne 0 ]; then
    echo "Please ensure you installed SpineML_Preflight for the spineml_preflight binary."
    exit -1
fi

# Make up the experiment file name
EXPERIMENT="experiment"$EXPT_NUM".xml"
echo "Experiment is: $EXPERIMENT"

#
# A word on directories.
#
# The MODEL_DIR passed in is the location of the origin model, which
# we will make a copy of. We copy it into our output directory, and
# then "preflight" it, using spineml_preflight to "fix" certain
# connection types, such as stochastic connection maps, and stochastic
# delays (spineml_preflight replaces these with explicit lists,
# generated according to the specification in the model). This copied
# model then becomes the "final state" model - all final values of the
# state variables are copied into this model directory.
#

# Make sure we have both model and temp directories.
if [ "x$OUTPUT_DIR" = "xtemp" ]; then
    OUTPUT_DIR="$SPINEML_2_BRAHMS_DIR/temp"
fi
mkdir -p "$OUTPUT_DIR"
OUTPUT_DIR=$(abspath "$OUTPUT_DIR")
echo "OUTPUT_DIR: $OUTPUT_DIR"
if [ "$?" -ne "0" ]; then
    echo "Failed to create temp/output directory" >&2
    exit -1
fi

# Set a default value for MODEL_DIR if necessary:
if [ "x$MODEL_DIR" = "x_unknown_model" ]; then
    MODEL_DIR="$SPINEML_2_BRAHMS_DIR/model"
fi
echo "MODEL_DIR: $MODEL_DIR"

# Our output model dir lives in our output dir:
OUTPUT_MODEL_DIR="$OUTPUT_DIR"/model
mkdir -p "$OUTPUT_MODEL_DIR"
if [ "$?" -ne "0" ]; then
    echo "Failed to create output model directory" >&2
    exit -1
fi
echo "OUTPUT_MODEL_DIR: $OUTPUT_MODEL_DIR"

# We make a COPY of the model dir, copying it into
# OUTPUT_MODEL_DIR. We'll then "preflight" this copy of the model and
# use this as the working input model.
cp -Ra $MODEL_DIR/* $OUTPUT_MODEL_DIR/
if [ "$?" -ne "0" ]; then
    echo "Failed to make a copy of the input model directory" >&2
    exit -1
fi

# Preflight the model - note we're outputting the contents of the PROPERTY_CHANGES
# array which contains --property_change="a:b:3" type options.
spineml_preflight -e $OUTPUT_MODEL_DIR"/"$EXPERIMENT ${PROPERTY_CHANGES[*]}
if [ "$?" -ne "0" ]; then
    echo "Failed to preflight the model." >&2
    exit -1
fi

# What OS are we?
if [ $(uname) = 'Linux' ]; then
    if [ $(uname -i) = 'i686' ]; then
        OS='Linux32'
    else
        OS='Linux64'
    fi
elif [ $(uname) = 'Windows_NT' ] || [ $(uname) = 'MINGW32_NT-6.1' ]; then
    OS='Windows'
else
    OS='OSX'
fi
echo "OS: $OS"

# Now to test to see if we have a pre-compiled/package managed
# toolspace? If NOT then we check if we need to compile using the
# build scripts.

if [ -d /usr/lib/spineml-2-brahms ]; then
    # We have a pre-compiled spineml-2-brahms
    echo "You have a pre-compiled spineml-2-brahms namespace installed. Copying this into your spineml-2-brahms dir ($SPINEML_2_BRAHMS_DIR/Namespace)"
    set -e
    mkdir -p "$SPINEML_2_BRAHMS_DIR/Namespace"
    cp -Ra /usr/lib/spineml-2-brahms/* "$SPINEML_2_BRAHMS_DIR/Namespace/"
    set +e
else 
    # Check whether we need to build the spineml-2-brahms namespace
    set -e # This tells bash to exit on any unsuccessful command (reverse with set +e)
    if [ "x$(cat current_os)" = "x$OS" ]; then
        echo "Tools compiled correctly"
    else
        echo "OS change detected, recompiling tools..."
        pwd
        pushd tools
        pushd allToAll/brahms/0/
        ./build
        popd
        pushd fixedProbability/brahms/0/
        ./build
        popd
        pushd explicitList/brahms/0/
        ./build
        popd
        pushd AnalogConstantInput/brahms/0/
        ./build
        popd
        pushd AnalogTimeVaryingInput/brahms/0/
        ./build
        popd
        pushd EventConstantInput/brahms/0/
        ./build
        popd
        pushd EventTimeVaryingInput/brahms/0/
        ./build
        popd
        pushd externalInput/brahms/0/
        ./build
        popd
        pushd externalOutput/brahms/0/
        ./build
        popd # leaving us in tools/dev/SpineML/tools/
        popd

        pushd "$SPINEML_2_BRAHMS_DIR"
        echo $OS &> current_os
        popd
    fi
    set +e # Back to explicitly checking return values of commands
fi

# Check if we have packaged/pre-installed xsl scripts
XSL_SCRIPT_PATH="$SPINEML_2_BRAHMS_DIR/xsl"
if [ -f "/usr/share/spineml-2-brahms/xsl/SpineML_2_BRAHMS_write_script.xsl" ]; then
    echo "Using packaged version of the SpineML to BRAHMS xsl scripts"
    XSL_SCRIPT_PATH="/usr/share/spineml-2-brahms/xsl/"
fi

# First check we have an experiment.xml file to work from.
# Could use cmd-line arg $INPUT here for the experiment file.
if [ ! -f "$OUTPUT_MODEL_DIR/$EXPERIMENT" ]; then
    echo "No experiment description to work from in $OUTPUT_MODEL_DIR/$EXPERIMENT" >&2
    echo "Exiting." >&2
    exit -1
fi

# Check we have xsltproc
XSLTPROC_BIN=`which xsltproc`
if [ "x$XSLTPROC_BIN" = "x" ]; then
    echo "Couldn't find the xsltproc binary, exiting." >&2
    exit -1
fi

# Clean up any old reports (MOVE?)
rm "$OUTPUT_DIR/rep*xml*" >/dev/null 2>&1
rm "$OUTPUT_DIR/sys*" >/dev/null 2>&1
rm "$OUTPUT_DIR/output_script" >/dev/null 2>&1

# create the output script using an xsl translation and the experiment.xml file
echo xsltproc -o "$OUTPUT_DIR/output.script" --stringparam hostos "$OS" \
         "$XSL_SCRIPT_PATH/SpineML_2_BRAHMS_write_script.xsl" \
         "$OUTPUT_MODEL_DIR/$EXPERIMENT"
xsltproc -o "$OUTPUT_DIR/output.script" --stringparam hostos "$OS" \
         "$XSL_SCRIPT_PATH/SpineML_2_BRAHMS_write_script.xsl" \
         "$OUTPUT_MODEL_DIR/$EXPERIMENT"
if [ "$?" -ne "0" ]; then
    echo "Failed to run xsltproc to produce the output script from your model. Exiting." >&2
    exit -1;
fi

# script permissions
if [ -e "$OUTPUT_DIR/output.script" ]; then
    chmod +x "$OUTPUT_DIR/output.script"
else
    echo "ERROR: conversion script not created - is xsltproc installed?" >&2
    exit -1
fi

# Configure environment variables for brahms
if [ -z "$BRAHMS_NS" ]; then
    echo "Using defaults for BRAHMS_NS and SYSTEMML_INSTALL_PATH."

    if [ $OS = 'Linux32' ] || [ $OS = 'Linux64' ]; then
        if [ -f /usr/bin/brahms ]; then
            # packaged brahms
            echo "Setting BRAHMS_NS, REBUILD and SYSTEMML_INSTALL_PATH to suit packaged brahms"
            export SYSTEMML_INSTALL_PATH="" # this should be empty
            BRAHMS_NS="/var/lib/brahms/Namespace"
        else
            # non-packaged brahms, assume SystemML folder in home directory.
            export SYSTEMML_INSTALL_PATH="$HOME/SystemML"
            BRAHMS_NS="$HOME/SystemML/Namespace"
        fi
    fi

    if [ $OS = 'OSX' ]; then
	if [ -d $HOME/SystemML ]; then
	    # Use Brahms in home.
	    export SYSTEMML_INSTALL_PATH="$HOME/SystemML"
	    BRAHMS_NS="$HOME/SystemML/Namespace"
	# Poss: elif [ -d /Applications/SystemML ]; then
	    # Use installed Brahms
	else
	    # Assume User has installed SpineCreator and has the bundled Brahms
            export SYSTEMML_INSTALL_PATH="/Applications/spinecreator.app/Contents/MacOS/SystemML"
	    # This is the SpineCreator-bundled path to Namespace:
            # /Applications/spinecreator.app/Contents/MacOS/SystemML/Namespace/
            BRAHMS_NS="/Applications/spinecreator.app/Contents/MacOS/SystemML/Namespace"
	fi
    fi
fi

# run the script
pushd "$OUTPUT_DIR"
echo "In directory: " `pwd`
echo "Execute: ./output.script $REBUILD_COMPONENTS $REBUILD_SYSTEMML $OUTPUT_MODEL_DIR $EXPERIMENT $BRAHMS_NS $SPINEML_2_BRAHMS_DIR  $OUTPUT_DIR $XSL_SCRIPT_PATH $NODES $NODEARCH"
./output.script "$REBUILD_COMPONENTS" "$REBUILD_SYSTEMML" "$OUTPUT_MODEL_DIR" "$EXPERIMENT" "$BRAHMS_NS" "$SPINEML_2_BRAHMS_DIR" "$OUTPUT_DIR" "$XSL_SCRIPT_PATH"  "$VERBOSE_BRAHMS" "$NODES" "$NODEARCH"
if [ "$?" -ne "0" ]; then
    echo "Failed to run output.script on $EXPERIMENT. Falling at the last hurdle." >&2
    exit -1;
fi
popd

# Success!
exit 0
