#!/bin/bash

##############################################################
# SpineML to BRAHMS platform specific wrapper ('NIX)         #
# Alex Cope 2012 /Updated 2013. Updates 2014: Seb James      #
#                                                            #
# convert_script_s2b is used to process a SpineML model into #
# Brahms-compatible executable components.                   #
#                                                            #
##############################################################


function usage () {
   cat <<EOF

usage: $0 [options]

convert_script_s2b is used to process a model in SPINEML_2_BRAHMS_DIR/model/.

It creates executable components from the SpineML descriptions provided in
SPINEML_2_BRAHMS_DIR/model/ using XSL transformations. It outputs source code
and executable code into a working directory, which defaults to
$HOME/spineml-2-brahms

It can use pre-compiled components from /usr/lib/spineml-2-brahms and pre-
installed XSL files from /usr/share/spineml-2-brahms if it has been correctly
installed on a Unix or Linux system, or it can be executed in-place using the
source code as downloaded. In the case the working directory is the downloaded
directory, SpineML_2_BRAHMS.

Options are:

  -w dirpath   Set the working directory - SPINEML_2_BRAHMS_DIR. If left un set,
               This will default either to SpineML_2_BRAHMS in the current
               working directory, $HOME/SpineML_2_BRAHMS (if it already exists)
               or to $HOME/spineml-2-brahms.

EOF
   exit 0
}

# The default location for the spineml-2-brahms temporary files and input model(s)
SPINEML_2_BRAHMS_DIR=$HOME"/spineml-2-brahms"

# User may have SpineML_2_BRAHMS in the current working directory, or
# in the their home directory, in which case use that instead (this is
# for developers to use a localised version of SpineML_2_BRAHMS, and
# for Mac)
if [ -d `pwd`/SpineML_2_BRAHMS ]; then
    # Working with SpineML_2_BRAHMS in current working directory - "in-place" style.
    SPINEML_2_BRAHMS_DIR=`pwd`/SpineML_2_BRAHMS

elif [ -d $HOME/SpineML_2_BRAHMS ]; then
    # Working with a $HOME/SpineML_2_BRAHMS installation - "in-home-dir" style.
    SPINEML_2_BRAHMS_DIR=$HOME/SpineML_2_BRAHMS
fi

# Parse cmd line options
while getopts w:\? opt
do
    case "$opt" in
        w)  SPINEML_2_BRAHMS_DIR="$OPTARG"
            ;;
        \?) usage
            ;;
    esac
done
shift `expr $OPTIND - 1`

# Do we have the ~/spineml-2-brahms directory in place? If not, create
# it.
if [ ! -d $SPINEML_2_BRAHMS_DIR ]; then
    mkdir -p $SPINEML_2_BRAHMS_DIR
    if [ "$?" -ne "0" ]; then
        echo "Failed to create directory $SPINEML_2_BRAHMS_DIR. Exiting."
        exit -1;
    fi
fi
# Make sure we have both model and temp directories.
set -e
mkdir -p $SPINEML_2_BRAHMS_DIR/model
mkdir -p $SPINEML_2_BRAHMS_DIR/temp
set +e

# What OS are we?
if [ $(uname) == 'Linux' ]; then
    if [ $(uname -i) == 'i686' ]; then
        OS='Linux32'
    else
        OS='Linux64'
    fi
else
    OS='OSX'
fi

# Now to test to see if we have a pre-compiled/package managed
# toolspace? If NOT then we check if we need to compile using the
# build scripts.

if [ -d /usr/lib/spineml-2-brahms ]; then
    # We have a pre-compiled spineml-2-brahms
    echo "You have a pre-compiled spineml-2-brahms namespace installed. Copying this into your spineml-2-brahms dir"
    set -e
    mkdir -p $SPINEML_2_BRAHMS_DIR/Namespace
    cp -Ra /usr/lib/spineml-2-brahms/* $SPINEML_2_BRAHMS_DIR/Namespace/
    set +e
else 
    # Check whether we need to build the spineml-2-brahms namespace
    set -e # This tells bash to exit on any unsuccessful command (reverse with set +e)
    if [ "x$(cat current_os)" = "x$OS" ]; then
        echo "Tools compiled correctly"
    else
        echo "OS change detected, recompiling tools..."
        pwd
        pushd tools
        pushd allToAll/brahms/0/
        ./build
        popd
        pushd fixedProbability/brahms/0/
        ./build
        popd
        pushd explicitList/brahms/0/
        ./build
        popd
        pushd AnalogConstantInput/brahms/0/
        ./build
        popd
        pushd AnalogTimeVaryingInput/brahms/0/
        ./build
        popd
        pushd EventConstantInput/brahms/0/
        ./build
        popd
        pushd EventTimeVaryingInput/brahms/0/
        ./build
        popd
        pushd externalInput/brahms/0/
        ./build
        popd
        pushd externalOutput/brahms/0/
        ./build
        popd # leaving us in tools/dev/SpineML/tools/
        popd

        pushd $SPINEML_2_BRAHMS_DIR
        echo $OS &> current_os
        popd
    fi
    set +e # Back to explicitly checking return values of commands
fi

# Check if we have packaged/pre-installed xsl scripts
XSL_SCRIPT_PATH="$SPINEML_2_BRAHMS_DIR/xsl"
if [ -f "/usr/share/spineml-2-brahms/xsl/SpineML_2_BRAHMS_write_script_linux.xsl" ]; then
    echo "Using packaged version of the SpineML to BRAHMS xsl scripts"
    XSL_SCRIPT_PATH="/usr/share/spineml-2-brahms/xsl/"
fi

# First check we have an experiment.xml file to work from.
# Could use cmd-line arg $INPUT here for the experiment file.
if [ ! -f $SPINEML_2_BRAHMS_DIR/model/experiment.xml ]; then
    echo "No experiment description to work from in $SPINEML_2_BRAHMS_DIR/model/experiment.xml"
    echo "Exiting."
    exit -1
fi

# Check we have xsltproc
XSLTPROC_BIN=`which xsltproc`
if [ "x$XSLTPROC_BIN" = "x" ]; then
    echo "Couldn't find the xsltproc binary, exiting."
    exit -1
fi

# Clean up any old reports (MOVE?)
rm $SPINEML_2_BRAHMS_DIR/temp/rep*xml* >/dev/null 2>&1
rm $SPINEML_2_BRAHMS_DIR/temp/sys* >/dev/null 2>&1
rm $SPINEML_2_BRAHMS_DIR/temp/output_script >/dev/null 2>&1

# create script (platform specific)
if [ $OS == 'Linux32' ]; then
    xsltproc -o $SPINEML_2_BRAHMS_DIR/temp/output.script \
        $XSL_SCRIPT_PATH/SpineML_2_BRAHMS_write_script_linux.xsl \
        $SPINEML_2_BRAHMS_DIR/model/experiment.xml
fi
if [ $OS == 'Linux64' ]; then
    xsltproc -o $SPINEML_2_BRAHMS_DIR/temp/output.script \
        $XSL_SCRIPT_PATH/SpineML_2_BRAHMS_write_script_linux.xsl \
        $SPINEML_2_BRAHMS_DIR/model/experiment.xml
fi
if [ $OS == 'OSX' ]; then
    xsltproc -o $SPINEML_2_BRAHMS_DIR/temp/output.script \
        $XSL_SCRIPT_PATH/SpineML_2_BRAHMS_write_script_osx.xsl \
        $SPINEML_2_BRAHMS_DIR/model/experiment.xml
fi
if [ "$?" -ne "0" ]; then
    echo "Failed to run xsltproc to produce the output script from your model. Exiting."
    exit -1;
fi

# script permissions
if [ -e "$SPINEML_2_BRAHMS_DIR/temp/output.script" ]; then
    chmod +x $SPINEML_2_BRAHMS_DIR/temp/output.script
else
    echo "ERROR: conversion script not created - is xsltproc installed?"
    exit -1
fi

# Configure environment variables for brahms
if [ -z $BRAHMS_NS ]; then
    echo "Using defaults for BRAHMS_NS, REBUILD and SYSTEMML_INSTALL_PATH."

    if [ $OS == 'Linux32' ] || [ $OS == 'Linux64' ]; then
        if [ -f /usr/bin/brahms ]; then
            # packaged brahms
            echo "Setting BRAHMS_NS, REBUILD and SYSTEMML_INSTALL_PATH to suit packaged brahms"
            export SYSTEMML_INSTALL_PATH=""
        else
            # non-packaged brahms
            export SYSTEMML_INSTALL_PATH="/usr/local/SystemML"
        fi
        BRAHMS_NS="$SPINEML_2_BRAHMS_DIR/Namespace"
    fi

    if [ $OS == 'OSX' ]; then
        export SYSTEMML_INSTALL_PATH="/Applications/SystemML"
        BRAHMS_NS="/Users/alex/Downloads/SpineML_2_BRAHMS/temp/Namespace"
    fi

    # Rebuild defaults to false for all platforms
    REBUILD="false"
fi

# run the script
pushd $SPINEML_2_BRAHMS_DIR/temp
echo "In directory: " `pwd`
echo "Execute: ./output.script experiment.xml $REBUILD $SPINEML_2_BRAHMS_DIR $XSL_SCRIPT_PATH"
./output.script experiment.xml $REBUILD $SPINEML_2_BRAHMS_DIR $XSL_SCRIPT_PATH
if [ "$?" -ne "0" ]; then
    echo "Failed to run output.script on the experiment.xml. Falling at the last hurdle."
    exit -1;
fi
popd

# Success!
exit 0
