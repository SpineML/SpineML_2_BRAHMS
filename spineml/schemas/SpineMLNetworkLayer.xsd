<?xml version="1.0" encoding="UTF-8"?>
<xs:schema id="SpineMLNetworkLayer"
xmlns:xs="http://www.w3.org/2001/XMLSchema"
targetNamespace="http://www.shef.ac.uk/SpineMLNetworkLayer"
xmlns="http://www.shef.ac.uk/SpineMLNetworkLayer"
xmlns:NML="http://www.shef.ac.uk/SpineMLNetworkLayer"
elementFormDefault="qualified">

	<!-- Element Definitions -->

    <xs:element name="SpineML" type="SpineMLType">

    	<!-- Keyrefs for general Component name referencing -->
    	<xs:key name="input_source_key">
    		<xs:selector xpath=".//NML:Group|.//NML:Population/NML:Neuron"></xs:selector>
    		<xs:field xpath="@name"></xs:field>
    	</xs:key>
    	<xs:keyref name="component_input_source" refer="input_source_key">
    		<xs:selector xpath=".//NML:Group/NML:Input"></xs:selector>
    		<xs:field xpath="@src"></xs:field>
    	</xs:keyref>
    	<xs:keyref name="neuron_Input_source" refer="input_source_key">
    		<xs:selector xpath=".//NML:Population/NML:Neuron/NML:Input"></xs:selector>
    		<xs:field xpath="@src"></xs:field>
    	</xs:keyref>
		<xs:keyref name="synapse_input_source" refer="input_source_key">
    		<xs:selector xpath=".//NML:Population/NML:Projection/NML:Synapse/NML:WeightUpdate/NML:Input"></xs:selector>
    		<xs:field xpath="@src"></xs:field>
    	</xs:keyref>
    	<xs:keyref name="postsynapse_input_source" refer="input_source_key">
    		<xs:selector xpath=".//NML:Population/NML:Projection/NML:Synapse/NML:PostSynapse/NML:Input"></xs:selector>
    		<xs:field xpath="@src"></xs:field>
    	</xs:keyref>
    	<!-- Keyrefs for specific Population name referencing -->
    	<xs:key name="population_name_key">
    		<xs:selector xpath=".//NML:Population/NML:Neuron"></xs:selector>
    		<xs:field xpath="@name"></xs:field>
    	</xs:key>
    	<xs:keyref name="population_destination" refer="population_name_key">
    		<xs:selector xpath=".//NML:Population/NML:Projection"></xs:selector>
    		<xs:field xpath="@dst_population"></xs:field>
		</xs:keyref>
    </xs:element>

	<xs:element name="Component" type="ComponentType"></xs:element>
    <xs:element name="Property" type="PropertyType"></xs:element>
    <xs:element name="AbstractValue" type="AbstractValueType"></xs:element>
    <xs:element name="FixedValue" substitutionGroup="AbstractValue" type="FixedValueType"></xs:element>
    <xs:element name="ValueList" substitutionGroup="AbstractValue" type="ValueListType"></xs:element>
    <xs:element name="Value" type="ValueType"></xs:element>
    <xs:element name="AbstractDistribution" type="AbstractDistributionType"></xs:element>
    <xs:element name="UniformDistribution" substitutionGroup="AbstractDistribution" type="UniformDistributionType"></xs:element>
    <xs:element name="NormalDistribution" substitutionGroup="AbstractDistribution" type="NormalDistributionType"></xs:element>
    <xs:element name="PoissonDistribution" substitutionGroup="AbstractDistribution" type="PoissonDistributionType"></xs:element>
    <xs:element name="AbstractConnection" type="AbstractConnectionType"></xs:element>
	<xs:element name="ConnectionList" substitutionGroup="AbstractConnection" type="ConnectionListType"></xs:element>
	<xs:element name="OneToOneConnection" substitutionGroup="AbstractConnection" type="OneToOneConnectionType"></xs:element>
	<xs:element name="AllToAllConnection" substitutionGroup="AbstractConnection" type="AllToAllConnectionType"></xs:element>
	<xs:element name="FixedProbabilityConnection" substitutionGroup="AbstractConnection" type="FixedProbabilityConnectionType"></xs:element>
	<xs:element name="Delay" type="DelayType"></xs:element>
	<xs:element name="Connection" type="ConnectionType"></xs:element>
  <xs:element name="BinaryFile" type="BinaryFileType"></xs:element>
	<xs:element name="Population" type="PopulationType"></xs:element>
	<xs:element name="Neuron" type="NeuronType"></xs:element>
	<xs:element name="Projection" type="ProjectionType"></xs:element>
	<xs:element name="Synapse" type="SynapseType"></xs:element>
	<xs:element name="WeightUpdate" type="WeightUpdateType"></xs:element>
	<xs:element name="PostSynapse" type="PostSynapseType"></xs:element>
	<xs:element name="Layout" type="LayoutType"></xs:element>
  <xs:element name="Annotation" type="AnnotationType"></xs:element>


  <!-- Re-Usable type definitions -->

	<xs:complexType name="SpineMLType">
    	<xs:sequence>
        <xs:element ref="Annotation" minOccurs="0"></xs:element>
    		<xs:choice maxOccurs="unbounded">
    			<xs:element ref="Population"></xs:element>
    		</xs:choice>
    	</xs:sequence>
		<xs:attribute name="name" type="xs:string"></xs:attribute>
    </xs:complexType>

    <xs:complexType name="ComponentType" abstract="true">
    	<xs:sequence>
      <xs:element ref="Annotation" minOccurs="0"></xs:element>
			<xs:choice maxOccurs="unbounded" minOccurs="0">
	    		<xs:element ref="Property"></xs:element>
    		</xs:choice>
    	</xs:sequence>
    	<xs:attribute name="name" type="xs:string" use="required"/>
    	<xs:attribute name="url" type="xs:string" use="required"/>
    </xs:complexType>

    <xs:complexType name="GroupType">
    	<xs:complexContent>
    		<xs:extension base="ComponentType">
		    	<xs:sequence>
		    		<xs:element ref="Layout" minOccurs="0"></xs:element>
		    	</xs:sequence>
		    	<xs:attribute name="size" type="xs:int" use="required"/>
	    	</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

    <xs:complexType name="PropertyType">
    	<xs:sequence>
            <xs:choice>
                  <xs:element ref="AbstractValue"></xs:element>
                  <xs:element ref="AbstractDistribution"></xs:element>
            </xs:choice>
    	</xs:sequence>
    	<xs:attribute name="name" type="xs:string" use="required"/>
    	<xs:attribute name="dimension" type="xs:string"/>
    </xs:complexType>

    <xs:complexType name="AbstractValueType" abstract="true">
    </xs:complexType>

    <xs:complexType name="FixedValueType">
    	<xs:complexContent>
    		<xs:extension base="AbstractValueType">
    			<xs:attribute name="value" type="xs:double" use="required"/>
    		</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ValueListType">
    	<xs:complexContent>
    		<xs:extension base="AbstractValueType">
    			<xs:sequence>
            <xs:choice>
              <xs:element ref="Value" maxOccurs="unbounded"></xs:element>
              <xs:element ref="BinaryFile"></xs:element>
            </xs:choice>
    			</xs:sequence>
    		</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ValueType">
		<xs:attribute name="index" type="xs:integer" use="required"/>
		<xs:attribute name="value" type="xs:double" use="required"/>
    </xs:complexType>

    <xs:complexType name="AbstractDistributionType" abstract="true">
    	<xs:complexContent>
    		<xs:extension base="AbstractValueType">
				<xs:attribute name="seed" type="xs:integer"/>
    		</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

	<xs:complexType name="UniformDistributionType">
    	<xs:complexContent>
    		<xs:extension base="AbstractDistributionType">
    			<xs:attribute name="minimum" type="xs:double" use="required"/>
    			<xs:attribute name="maximum" type="xs:double" use="required"/>
    		</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

    <xs:complexType name="NormalDistributionType">
    	<xs:complexContent>
    		<xs:extension base="AbstractDistributionType">
    			<xs:attribute name="mean" type="xs:double" use="required"/>
    			<xs:attribute name="variance" type="xs:double" use="required"/>
    		</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

    <xs:complexType name="PoissonDistributionType">
    	<xs:complexContent>
    		<xs:extension base="AbstractDistributionType">
    			<xs:attribute name="mean" type="xs:double" use="required"/>
    		</xs:extension>
    	</xs:complexContent>
    </xs:complexType>





    <xs:complexType name="AbstractConnectionType" abstract="true">
    </xs:complexType>

	<xs:complexType name="ConnectionListType">
    	<xs:complexContent>
    		<xs:extension base="AbstractConnectionType">
    			<xs:sequence>
            <xs:element ref="Annotation" minOccurs="0"></xs:element>
    				<xs:element ref="Delay" minOccurs="0"></xs:element>
            <xs:choice>
              <xs:element ref="Connection" maxOccurs="unbounded" minOccurs="0"></xs:element>
              <xs:element ref="BinaryFile"></xs:element>
            </xs:choice>
    			</xs:sequence>
    		</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

    <xs:complexType name="OneToOneConnectionType">
    	<xs:complexContent>
    		<xs:extension base="AbstractConnectionType">
    			<xs:sequence>
    				<xs:element ref="Delay"></xs:element>
    			</xs:sequence>
    		</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

    <xs:complexType name="AllToAllConnectionType">
    	<xs:complexContent>
    		<xs:extension base="AbstractConnectionType">
    			<xs:sequence>
    				<xs:element ref="Delay"></xs:element>
    			</xs:sequence>
    		</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

    <xs:complexType name="FixedProbabilityConnectionType">
    	<xs:complexContent>
    		<xs:extension base="AbstractConnectionType">
    			<xs:sequence>
	    			<xs:element ref="Delay"></xs:element>
    			</xs:sequence>
   				<xs:attribute name="probability" type="xs:double" use="required"/>
				<xs:attribute name="seed" type="xs:integer"/>
    		</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

    <xs:complexType name="ConnectionType">
			<xs:attribute name="src_neuron" type="xs:integer" use="required"/>
			<xs:attribute name="dst_neuron" type="xs:integer" use="required"/>
			<xs:attribute name="delay" type="xs:double" use="optional"/>
			<!-- <xs:attribute name="index" type="xs:integer" use="optional"/> --> <!-- Depriciated. Index assumed by position! -->
    </xs:complexType>

  <xs:complexType name="BinaryFileType">
    <xs:attribute name="file_name" type="xs:string" use="required"/>
    <xs:attribute name="num_connections" type="xs:integer" use="optional"/>
    <xs:attribute name="num_elements" type="xs:integer" use="optional"/>
    <xs:attribute name="explicit_delay_flag" type="xs:integer" use="optional"/>
    <xs:attribute name="packed_data" type="xs:boolean" use="optional"/>
  </xs:complexType>


    <xs:complexType name="DelayType">
    	<xs:sequence>
    		<xs:choice> <!-- Delay value is a subset of possible AbstractValues (i.e. no explicit list is allowed)-->
    			<xs:element ref="FixedValue"/>
    			<xs:element ref="AbstractDistribution"/>
    		</xs:choice>
    	</xs:sequence>
      <xs:attribute name="dimension" type="xs:string"/>
    </xs:complexType>




    <xs:complexType name="PopulationType">
		<xs:sequence>
      <xs:element ref="Annotation" minOccurs="0"></xs:element>
			<xs:element ref="Neuron"></xs:element>
			<xs:element ref="Layout" minOccurs="0"></xs:element>
			<xs:element ref="Projection" minOccurs="0" maxOccurs="unbounded"></xs:element>
		</xs:sequence>
    </xs:complexType>

    <xs:complexType name="NeuronType">
    	<xs:complexContent>
    		<xs:extension base="ComponentType">
		    	<xs:attribute name="size" type="xs:int" use="required"/>
	    	</xs:extension>
    	</xs:complexContent>
    </xs:complexType>


    <xs:complexType name="ProjectionType">
		<xs:sequence>
			<xs:element ref="Synapse" maxOccurs="unbounded"/>
		</xs:sequence>
		<xs:attribute name="dst_population" type="xs:string" use="required"/> <!-- Must reference a Population (Neuron) name -->
    </xs:complexType>


    <xs:complexType name="SynapseType">
		<xs:sequence>
			<xs:element ref="AbstractConnection"></xs:element>
			<xs:element ref="WeightUpdate"></xs:element>
			<xs:element ref="PostSynapse"></xs:element>
		</xs:sequence>
    </xs:complexType>

    <xs:complexType name="WeightUpdateType">
    	<xs:complexContent>
    		<xs:extension base="ComponentType">
				<xs:attribute name="input_src_port" type="xs:string" use="required"/>
				<xs:attribute name="input_dst_port" type="xs:string" use="required"/>
                <xs:attribute name="feedback_src_port" type="xs:string"/> <!-- Feedback channel from post synaptic neuron body for learning -->
                <xs:attribute name="feedback_dst_port" type="xs:string"/> <!-- Feedback channel from post synaptic neuron body for learning -->
	    	</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

      <xs:complexType name="PostSynapseType">
    	<xs:complexContent>
    		<xs:extension base="ComponentType">
				<xs:attribute name="input_src_port" type="xs:string" use="required"/>
				<xs:attribute name="input_dst_port" type="xs:string" use="required"/>
				<xs:attribute name="output_src_port" type="xs:string" use="required"/>
				<xs:attribute name="output_dst_port" type="xs:string" use="required"/>
	    	</xs:extension>
    	</xs:complexContent>
    </xs:complexType>

    <xs:complexType name="LayoutType">	<!-- For now Layout can have any data -->
    	<xs:sequence>
        <xs:choice maxOccurs="unbounded" minOccurs="0">
          <xs:element ref="Property" ></xs:element>
        </xs:choice>
    	</xs:sequence>
      <xs:attribute name="url"></xs:attribute>
      <xs:attribute name="seed" type="xs:int"></xs:attribute>
      <xs:attribute name="minimum_distance" type="xs:double"></xs:attribute>
    </xs:complexType>

    <xs:complexType name="AnnotationType">
      <!-- Annotations can have any elements or attrbutes -->
      <xs:sequence>
        <xs:any minOccurs="0" maxOccurs="unbounded" namespace="##any" processContents="lax"/>
      </xs:sequence>
      <xs:anyAttribute/>
    </xs:complexType>

</xs:schema>
